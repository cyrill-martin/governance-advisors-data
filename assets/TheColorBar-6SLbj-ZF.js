import{G as D,aM as S,w as p,r as o,aT as r,k as f,D as _,E as G}from"./index-LnIg-O4v.js";const H={__name:"TheColorBar",setup(V){const n=D(),a=S();p(()=>a.mapDrawn,t=>{t&&d()});const s=o(null),c=o(null),e=o({width:null,height:null,margin:{top:null,right:null,bottom:null,left:null},ctrWidth:null,ctrHeight:null}),v=o([]),u=o(null),m=o(null);async function d(){r.select("#svg-color-bar").remove(),v.value=await x(),await w(),await M(),await B(),await C()}async function b(){const t=r.select("#color-bar"),l=r.select("#svg-visualization");e.value.width=t.node().getBoundingClientRect().width,e.value.height=n.isMobile?150:await l.node().getBoundingClientRect().height,e.value.margin.top=n.isMobile?20:10,e.value.margin.right=10,e.value.margin.bottom=n.isMobile?10:40,e.value.margin.left=0,e.value.ctrWidth=e.value.width-e.value.margin.left-e.value.margin.right,e.value.ctrHeight=e.value.height-e.value.margin.top-e.value.margin.bottom}async function w(){const t=r.select("#color-bar");await b(),s.value=t.append("svg").attr("id","svg-color-bar").attr("viewBox",`0 0 ${e.value.width} ${e.value.height}`),c.value=s.value.append("g").attr("id","color-bar-ctr").attr("transform",`translate(${e.value.margin.left}, ${e.value.margin.top})`)}p(()=>a.selectedVariable,async()=>{a.mapDrawn&&d()}),p(()=>a.absoluteValues,async()=>{a.mapDrawn&&d()});async function x(){if(!a.selectedVariable)return null;if(a.absoluteValues){const t=r.extent(a.boardMembers[a.selectedVariable].map(l=>l.Count));return[t[0],t[1]]}else{const t=r.extent(a.boardMembers[a.selectedVariable].map(l=>l.Percentage));return[t[0],t[1]]}}const g=f(()=>n.isMobile?25:0),y=f(()=>n.isMobile?25:30);async function M(){const t=n.isMobile?0:e.value.ctrHeight,l=n.isMobile?e.value.ctrWidth-g.value:0;u.value=r.scaleLinear().range([t,l]).domain(v.value).nice()}async function B(){const t=n.isMobile?r.axisTop(u.value):r.axisRight(u.value);m.value=c.value.append("g").attr("transform",`translate(${y.value}, 0)`).style("font-size",()=>n.isMobile?"10px":"14px"),m.value.call(t)}async function C(){const t=n.isMobile?e.value.ctrWidth-g.value:30,l=n.isMobile?25:e.value.ctrHeight;let i=s.value.select("#legendGradient");if(i.empty()){const h=s.value.append("defs");n.isMobile?i=h.append("linearGradient").attr("id","legendGradient").attr("x1","100%").attr("x2","0%").attr("y1","50%").attr("y2","50%"):i=h.append("linearGradient").attr("id","legendGradient").attr("x1","50%").attr("x2","50%").attr("y1","0%").attr("y2","100%"),i.append("stop").attr("offset","0%").attr("stop-color",a.colors[2]),i.append("stop").attr("offset","50%").attr("stop-color",a.colors[1]),i.append("stop").attr("offset","100%").attr("stop-color",a.colors[0])}c.value.append("rect").attr("id","gradient-bar").attr("x",g.value).attr("y",0).attr("width",t).attr("height",l).style("fill","url(#legendGradient)")}return(t,l)=>(G(),_("div"))}};export{H as default};
